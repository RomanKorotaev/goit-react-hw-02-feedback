{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","totalFeedback","positiveFeedbackPercentage","className","s","list","item","FeedbackOptions","options","onLeaveFeedback","container","map","option","onClick","type","button","Section","title","children","Notification","message","App","state","e","name","currentTarget","setState","prevState","increment","value","Math","round","this","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c88ba0b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2xQbN\",\"container\":\"FeedbackOptions_container__1elYp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__VPscv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__1ieTX\"};","import React from 'react';\r\nimport s from './Statistics.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction Statistics({ good, neutral, bad, totalFeedback, positiveFeedbackPercentage }) {\r\n\r\n    // console.log('Statistics /  totalFeedback : ', totalFeedback);\r\n    // console.log('Statistics /  positiveFeedbackPercentage : ', positiveFeedbackPercentage);\r\n    \r\n    return (\r\n        <>\r\n          <ul className={s.list}>\r\n            <li className={s.item}>Good: {good}</li>\r\n            <li className={s.item}>Neutral: {neutral}</li>\r\n            <li className={s.item}>Bad: {bad}</li>\r\n            <li className={s.item}>Total: { totalFeedback}</li>\r\n            <li className={s.item}>Positive feedbacks: {positiveFeedbackPercentage} %</li>\r\n          </ul>\r\n      </>\r\n    )\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div className={s.container}>\r\n      {options.map((option) => (\r\n        <button\r\n          key={option}\r\n          onClick={onLeaveFeedback(option)}\r\n          type=\"button\"\r\n          className={s.button}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport s from './Section.module.css';\r\n\r\n function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section\r\n    ;","import PropTypes from 'prop-types';\r\nimport s from './Notification.module.css';\r\n\r\n function Notification({ message }) {\r\n  return (\r\n    <div>\r\n      <p className={s.title}>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","// import logo from './logo.svg';\n// import logo from './coffeeCup.png'\nimport './App.css';\nimport React, { Component } from 'react';\nimport Statistics from './components/Statistics'\nimport FeedbackOptions from './components/FeedbackOptions'\nimport Section from './components/Section'\nimport Notification from './components/Notification'\n\nclass App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n}\n\n\n// Общий обработчик для нескольких разных кнопок (функция использовалась до выноса кнопок в отдельный компонент)\n  onLeaveFeedback = (e) => {\n    const { name } = e.currentTarget;\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n  \n    increment = (value) => () => {\n    this.setState((prevState) => ({\n      [value]: prevState[value] + 1,\n    }));\n  };\n\n  // Подсчитываем общую сумму\n  totalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return (good + neutral + bad);\n  };\n\n\n// Высчитываем пропрорцию (процент) позитивных откликов\n  positiveFeedbackPercentage = () => {\n    return Math.round(this.state.good * 100 / this.totalFeedback());\n  }\n\n\n\n  render() {\n\n    const { good, neutral, bad } = this.state;\n    const { onLeaveFeedback, totalFeedback, positiveFeedbackPercentage } = this;\n    \n    const options = Object.keys(this.state); //Назначаем каждой кнопке уникальный идентификатор (индекс массива)\n    // заносим свойства объекта this.state  в отдельный массив опций через функцию Object.keys(this.state)\n       \n    // console.log('options = Object.keys(this.state)', options)\n    \n    return (\n      <div className=\"containerApp\">\n       \n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions options={options} onLeaveFeedback={this.increment} />\n        </Section>\n                  \n          {/* <FeedbackOptions options={options} onLeaveFeedback={this.onLeaveFeedback} /> */}\n        {/* <div>\n            <button type=\"button\" name=\"good\" onClick={this.onLeaveFeedback}> Good </button>\n            <button type=\"button\"  name=\"neutral\" onClick={this.onLeaveFeedback}> Neutral </button>\n            <button type=\"button\"  name=\"bad\" onClick={this.onLeaveFeedback}> Bad </button>\n          </div> */}\n\n        {/* Вынесли кнопки с типом отзыва в отдельный компонент. Идентификация кнопок теперь не по имени, а по индексув массиве\n        В связи с этим использкем не функцию this.onLeaveFeedback c name, a  функцию this.increment  c value */}\n          \n\n          {totalFeedback() > 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            totalFeedback={totalFeedback()}\n              positiveFeedbackPercentage={positiveFeedbackPercentage()} />\n             </Section>\n             ) : (\n            <Notification message=\"No feedback given\" />\n              )}\n         \n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}